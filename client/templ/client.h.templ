//
// Copyright 2016 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#pragma once

#include "mqttsn/client/common.h"

#ifdef __cplusplus
extern "C" {
#endif // #ifdef __cplusplus

MqttsnClientHandle MQTTSN_CLIENT_API mqttsn_##NAME##client_new();
void MQTTSN_CLIENT_API mqttsn_##NAME##client_free(MqttsnClientHandle client);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_next_tick_program_callback(
    MqttsnClientHandle client,
    MqttsnNextTickProgramFn fn,
    void* data);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_cancel_next_tick_wait_callback(
    MqttsnClientHandle client,
    MqttsnCancelNextTickWaitFn fn,
    void* data);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_send_output_data_callback(
    MqttsnClientHandle client,
    MqttsnSendOutputDataFn fn,
    void* data);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_gw_status_report_callback(
    MqttsnClientHandle client,
    MqttsnGwStatusReportFn fn,
    void* data);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_connection_status_report_callback(
    MqttsnClientHandle client,
    MqttsnConnectionStatusReportFn fn,
    void* data);

void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_message_report_callback(
    MqttsnClientHandle client,
    MqttsnMessageReportFn fn,
    void* data);
    
MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_start(MqttsnClientHandle client);
MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_stop(MqttsnClientHandle client);
unsigned MQTTSN_CLIENT_API mqttsn_##NAME##client_process_data(MqttsnClientHandle client, const unsigned char* from, unsigned len);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_tick(MqttsnClientHandle client, unsigned ms);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_gw_advertise_period(MqttsnClientHandle client, unsigned value);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_retry_period(MqttsnClientHandle client, unsigned value);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_retry_count(MqttsnClientHandle client, unsigned value);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_broadcast_radius(MqttsnClientHandle client, unsigned char value);
void MQTTSN_CLIENT_API mqttsn_##NAME##client_set_searchgw_mode(MqttsnClientHandle client, MqttsnSearchgwMode value);

bool MQTTSN_CLIENT_API mqttsn_##NAME##client_cancel(MqttsnClientHandle client);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_connect(
    MqttsnClientHandle client,
    const char* clientId,
    unsigned short keepAliveSeconds,
    bool cleanSession,
    const MqttsnWillInfo* willInfo);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_disconnect(MqttsnClientHandle client);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_publish_id(
    MqttsnClientHandle client,
    MqttsnTopicId topicId,
    const unsigned char* msg,
    unsigned msgLen,
    MqttsnQoS qos,
    bool retain,
    MqttsnPublishCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_publish(
    MqttsnClientHandle client,
    const char* topic,
    const unsigned char* msg,
    unsigned msgLen,
    MqttsnQoS qos,
    bool retain,
    MqttsnPublishCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_subscribe_id(
    MqttsnClientHandle client,
    MqttsnTopicId topicId,
    MqttsnQoS qos,
    MqttsnSubscribeCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_subscribe(
    MqttsnClientHandle client,
    const char* topic,
    MqttsnQoS qos,
    MqttsnSubscribeCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_unsubscribe_id(
    MqttsnClientHandle client,
    MqttsnTopicId topicId,
    MqttsnUnsubscribeCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_unsubscribe(
    MqttsnClientHandle client,
    const char* topic,
    MqttsnUnsubscribeCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_will_update(
    MqttsnClientHandle client,
    const MqttsnWillInfo* willInfo,
    MqttsnWillUpdateCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_will_topic_update(
    MqttsnClientHandle client,
    const char* topic,
    MqttsnQoS qos,
    bool retain,
    MqttsnWillTopicUpdateCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_will_msg_update(
    MqttsnClientHandle client,
    const unsigned char* msg,
    unsigned msgLen,
    MqttsnWillMsgUpdateCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_sleep(
    MqttsnClientHandle client,
    unsigned short duration,
    MqttsnSleepCompleteReportFn callback,
    void* data
);

MqttsnErrorCode MQTTSN_CLIENT_API mqttsn_##NAME##client_check_messages(
    MqttsnClientHandle client,
    MqttsnCheckMessagesCompleteReportFn callback,
    void* data
);

#ifdef __cplusplus
}
#endif
