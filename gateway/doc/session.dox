/// @page mqttsn_gw_session_page Session
/// @tableofcontents
/// The @b Session object is responsible to manage and forward traffic of
/// messages between @b single MQTT-SN client and the broker. When new message
/// is recieved over the I/O link, the driving code must check whether any
/// @b Session object has already been created for the client that sent the
/// message (the clients can be differentiated by their origin address). If
/// such @b Session does NOT exist, it must be created. 
///
/// The recieved data needs to be forwarded to appropriate @b Session object 
/// for processing. And when the @b Session object requests to send message
/// back, it needs to be sent to the right address. It is a responsibility of
/// the driving code to maintain a valid map between the client's address and
/// appropriate @b Session object.
///
/// @section mqttsn_gw_session_page_alloc Allocation
/// When using @b C++ interface, just instantiate object of mqttsn::gateway::Session
/// class. The destruction of the object will clean up all acquired resources.
/// @code
/// std::unique_ptr<mqttsn::gateway::Session> ptr(new mqttsn::gateway::Session);
/// @endcode
///
/// When using @b C interface, the allocation is performed using mqttsn_gw_session_alloc()
/// and de-allocation is performed using mqttsn_gw_session_free() functions.
/// @code
/// MqttsnSessionHandle session = mqttsn_gw_session_alloc();
/// mqttsn_gw_session_free(session);
/// @endcode


